```
Given a 2D array A, each cell is 0 (representing sea) or 1 (representing land)

A move consists of walking from one land square 4-directionally to another land square, or off the boundary of the grid.

Return the number of land squares in the grid for which we cannot walk off the boundary of the grid in any number of moves.

Example 1:

Input: [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
Output: 3
Explanation: 
There are three 1s that are enclosed by 0s, and one 1 that isn't enclosed because its on the boundary.
Example 2:

Input: [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
Output: 0
Explanation: 
All 1s are either on the boundary or can reach the boundary.
 

Note:
1 <= A.length <= 500
1 <= A[i].length <= 500
0 <= A[i][j] <= 1
All rows have the same size.
```
from collections import deque # deque is double edged queue

ADJ = [(-1,0),(1,0),(0,-1),(0,1)]

class Solution:
    def is_enclave_bfs(self, A, row, col, visited):
        q = deque() # use a deque (double edged queue) to store all the position that needs to be checked
        q.append((row,col)) # add current (c,r) pair to deque 
        isBorder = False  # initiate isBorder as False
        size = 0
        
        while len(q) > 0: # if all position has been checked, break out of the loop
            row, col = q.popleft()
            
            if not visited[row][col]:
                visited[row][col] = True
                size += 1
                
                # try out the 4 directions
                for dr, dc in ADJ:
                    nr = row + dr
                    nc = col + dc
                    
                    # check if next row or col is outside grid:
                    if nr < 0 or nr >= self._m or nc<0 or nc >= self._n:
                        isBorder = True
                        
                    # if within grid, check whether it's a land square and not visited before    
                    elif A[nr][nc] == 1 and not visited[nr][nc]:
                        q.append((nr,nc))  
                        
        return (isBorder,size)
    
    def numEnclaves(self, A: List[List[int]]) -> int:
        self._m = len(A)    # number of rows
        self._n = len(A[0]) # number of columns
        visited = [[False] * self._n for _ in range(self._m)] # 2-d array to store visited positions
        total_size = 0
        
        # check every starting point on the grid to see whether it is an enclave
        for r in range(self._m):
            for c in range(self._n):
                if A[r][c] == 1 and not visited[r][c]:
                    isBorder,size = self.is_enclave_bfs(A,r,c,visited)
                    if isBorder == False:
                        total_size += size
                        
        return  total_size
