#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Apr 25 19:56:10 2020

@author: annayu

Given a string s of zeros and ones, 
return the maximum score after splitting the string into two non-empty substrings 
(i.e. left substring and right substring).

The score after splitting a string is the number of zeros in the left substring 
plus the number of ones in the right substring.

Example 1:
Input: s = "011101"
Output: 5 
Explanation: 
All possible ways of splitting s into two non-empty substrings are:
left = "0" and right = "11101", score = 1 + 4 = 5 
left = "01" and right = "1101", score = 1 + 3 = 4 
left = "011" and right = "101", score = 1 + 2 = 3 
left = "0111" and right = "01", score = 1 + 1 = 2 
left = "01110" and right = "1", score = 2 + 1 = 3


Example 2:
Input: s = "00111"
Output: 5
Explanation: When left = "00" and right = "111", we get the maximum score = 2 + 3 = 5

Example 3:
Input: s = "1111"
Output: 3


"""
s1 = "011101"
s2 = "00111"
s3 = "1111"

class Solution:
    def maxScore(self, s: str) -> int:
        max_count = 0
        
        for i in range(1,len(s)):
            s_left = s[0:i]
            s_right = s[i:len(s)]
            count = s_left.count('0') + s_right.count('1')
            max_count = max(max_count, count)
        
        return max_count

S = Solution()
S.maxScore(s1) #5
S.maxScore(s2) #5
S.maxScore(s3) #3