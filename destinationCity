#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat May  2 20:19:15 2020

@author: annayu
5400. Destination City
User Accepted:5708
User Tried:5932
Total Accepted:5785
Total Submissions:7031
Difficulty:Easy
You are given the array paths, where paths[i] = [cityAi, cityBi] means 
there exists a direct path going from cityAi to cityBi. 
Return the destination city, that is, the city without any path outgoing to another city.

It is guaranteed that the graph of paths forms a line without any loop, 
therefore, there will be exactly one destination city.

Example 1:
Input: paths = [["London","New York"],["New York","Lima"],["Lima","Sao Paulo"]]
Output: "Sao Paulo" 
Explanation: Starting at "London" city you will reach "Sao Paulo" city 
which is the destination city. 
Your trip consist of: "London" -> "New York" -> "Lima" -> "Sao Paulo".

Example 2:
Input: paths = [["B","C"],["D","B"],["C","A"]]
Output: "A"
Explanation: All possible trips are: 
"D" -> "B" -> "C" -> "A". 
"B" -> "C" -> "A". 
"C" -> "A". 
"A". 
Clearly the destination city is "A".

Example 3:
Input: paths = [["A","Z"]]
Output: "Z"
"""

class Solution:
    def destCity(self, paths: List[List[str]]) -> str:
        set_indegree = set()
        set_outdegree = set()
        
        for p in paths:
            indegree = p[0]
            outdegree = p[1]
            
            set_indegree.add(indegree)
            set_outdegree.add(outdegree)
        
        result = set_outdegree - set_indegree
        return list(result)[0]
        